#!/usr/bin/env python3

import json
import kubernetes
import os
import sys
import time
import yaml

config_path = os.environ.get('OPTUNE_CONFIG', './config.yaml')
REQUIRED_CONFIG = [ 'current_mode_deployment_name', 'current_mode_namespace', 'current_mode_annotation', 'desired_mode_deployment_name', 'desired_mode_namespace', 'desired_mode_annotation']


def patch_annotation_dict(annoation, value):
    return {
        'apiVersion': 'apps/v1',
        'kind': 'Deployment',
        'metadata': {
            'annotations': { annoation: value }
        }
    }

def run():
    if os.getenv('KUBERNETES_SERVICE_HOST'): # If running in a kubernetes cluster
        kubernetes.config.load_incluster_config()
    else:
        kubernetes.config.load_kube_config()

    try:
        config = yaml.safe_load(open(config_path))
    except yaml.YAMLError as e:
        raise Exception('Could not parse config file located at "{}". '
                        'Please check its contents. Error: {}'.format(config_path, str(e)))

    err_preamble = 'Configuration error in {}:'.format(config_path)
    assert config.get('k8senv'), '{} k8senv deployment configuration section not found'.format(err_preamble)
    config = config['k8senv']

    
    for cfg_itm in REQUIRED_CONFIG:
        assert config.get(cfg_itm), '{} {} is required in k8senv configuration'.format(err_preamble, cfg_itm)

    assert isinstance(config.get('sleep_delay', 121), (int, float)) and config.get('sleep_delay', 121) > 0 \
        , '{} k8senv sleep_delay must be a number greater than 0'.format(err_preamble)

    # Load input
    try:
        input_data = json.loads(sys.stdin.read())
    except json.decoder.JSONDecodeError as e:
        raise Exception('Failed to read environment input descriptor on stdin') from e

    des_mode = input_data.get('control', {}).get('environment', {}).get('mode')
    if des_mode is None:
        raise Exception('Failed to read environment input descriptor, no control.environment.mode value was provided ')
    
    apps_client = kubernetes.client.AppsV1Api()
    tgt_dep = apps_client.read_namespaced_deployment(config['current_mode_deployment_name'], config['current_mode_namespace'])
    cur_mode = tgt_dep.metadata.annotations.get(config['current_mode_annotation'])
    if cur_mode in [None, '']:
        raise Exception('Missing annotation or empty value {}: {}'.format(config['current_mode_annotation'], cur_mode))

    if cur_mode == des_mode:
        print('{"status":"ok"}')
        return
    
    # Only patch if desired isn't there yet. May have multiple 'environment-mismatch' failure cycles before the environment finishes updating
    des_dep = apps_client.read_namespaced_deployment(config['desired_mode_deployment_name'], config['desired_mode_namespace'])
    if des_dep.metadata.annotations.get(config['desired_mode_annotation']) != des_mode:
        apps_client.patch_namespaced_deployment(
            config['desired_mode_deployment_name'], 
            config['desired_mode_namespace'], 
            body=patch_annotation_dict(config['desired_mode_annotation'], des_mode)
        )

    time.sleep(config.get('sleep_delay', 121))

    print('{"status":"environment-mismatch"}')

if __name__ == '__main__':
    run()
